# For development
services:
  backend: 
    build:
      context: ./django
      dockerfile: Dockerfile.dev
    ports:
      - 8000:8000
    env_file:
      - ./env/django.env
    container_name: django_container
  frontend:
    build: 
        context: ./react
        dockerfile: Dockerfile.dev
    volumes:
      - ./react/src:/app/src
    ports:
      - 3000:3000
    env_file:
      - ./env/react.env
    depends_on:
      - backend
    stdin_open: true
    tty: true
    container_name: react_container

## For production
## Need to modify settings.py for postgresql database
## Need nginx-setup.conf
# services:
#   backend:
#     build:
#       context: ./django
#     command: gunicorn core.wsgi --bind 0.0.0.0:8000
#     ports:
#       - "8000:8000"
#   frontend:
#     build:
#       context: ./react
#     volumes:
#       - react_build:/react/build
#   nginx:
#     image: nginx:latest
#     ports:
#       - 80:8080
#     volumes:
#       - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
#       - react_build:/var/www/react
#     depends_on:
#       - backend
#       - frontend
# volumes:
#   react_build:


## Other production structure
## Need to modify settings.py for postgresql database
# services:
#   postgres_db:
#     image: postgres
#     volumes:
#       - ./data/db:/var/lib/postgresql/data
#     env_file:
#       - ./env/postgres_db.env
#     container_name: postgres_db
#   backend: 
#     build: ./django
#     command: gunicorn core.wsgi --bind 0.0.0.0:8000
#     volumes: 
#       - ./django/instagram/views.py:/app/instgram/views.py
#       - ./django/instagram/urls.py:/app/instgram/urls.py
#     ports:
#       - 8000:8000
#     env_file:
#       - ./env/django.env
#     depends_on:
#       - postgres_db
#     container_name: django_container
#   frontend:
#     build: ./react
#     ports:
#       - 80:80
#     depends_on:
#       - backend
#     stdin_open: false
#     tty: false
#     container_name: react_container
